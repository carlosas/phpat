{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"Easy to use architecture testing tool for PHP <p>PHP Architecture Tester is a PHPStan extension (Static Analysis tool) designed to verify architectural requirements. It provides a natural language abstraction that enables you to define your own architectural rules and assess their compliance.</p> <p> </p> <p>\ud83d\udca1 Check out the Examples section to get some ideas and see some typical use cases.</p> <p>\ud83d\udd17 GitHub: https://github.com/carlosas/phpat/</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"CHANGELOG/#0120","title":"0.12.0","text":"<ul> <li>Remove deprecated selector modifiers</li> <li>Bump minimum PHP version to 8.1</li> <li>Bump minimum PHPStan version to 2.1</li> <li>Add <code>ShouldBeEnum</code> and <code>ShouldNotBeEnum</code> assertions</li> </ul>"},{"location":"CHANGELOG/#01110","title":"0.11.10","text":"<ul> <li>Fix <code>ShouldHaveOnlyOnePublicMethodNamed</code> assertion</li> </ul>"},{"location":"CHANGELOG/#0119","title":"0.11.9","text":"<ul> <li>Fix <code>ShouldBeNamed</code> assertion</li> <li>Add <code>isStandardClass</code> selector</li> </ul>"},{"location":"CHANGELOG/#0118","title":"0.11.8","text":"<ul> <li>Add PHP 8.3 missing built-in classes</li> <li>Catch instanceof in dependency rules</li> </ul>"},{"location":"CHANGELOG/#0117","title":"0.11.7","text":"<ul> <li>Add <code>withFilepath</code> selector</li> <li>Rollback param name for <code>ShouldBeNamed</code> assertion</li> </ul>"},{"location":"CHANGELOG/#0116","title":"0.11.6","text":"<ul> <li>Add missing rule identifier to Declaration assertions</li> <li>Fix support for regex in <code>ShouldHaveOnlyOnePublicMethodNamed</code></li> <li>Add support for attribute arguments in <code>AppliesAttribute</code> assertion</li> </ul>"},{"location":"CHANGELOG/#0115","title":"0.11.5","text":"<ul> <li>Add <code>ShouldBeInvokable</code> assertion</li> <li>Fix incorrect param name for <code>ShouldBeNamed</code> assertion</li> </ul>"},{"location":"CHANGELOG/#0114","title":"0.11.4","text":"<ul> <li>Add <code>ShouldHaveOnlyPublicMethodNamed</code> assertion</li> <li>Fix run on previous PHP versions</li> </ul>"},{"location":"CHANGELOG/#0113","title":"0.11.3","text":"<ul> <li>Fix error with getNativeReflection in latest PHPStan versions</li> <li>Catch included traits in dependency assertions</li> </ul>"},{"location":"CHANGELOG/#0112","title":"0.11.2","text":"<ul> <li>Add <code>AllOf()</code> selector modifier</li> <li>Add <code>AnyOf()</code> selector modifier</li> <li>Add <code>AtLeastCountOf()</code> selector modifier</li> <li>Add <code>AtMostCountOf()</code> selector modifier</li> <li>Add <code>NoneOf()</code> selector modifier</li> <li>Add <code>OneOf()</code> selector modifier</li> <li>Deprecate <code>AND()</code> selector modifier</li> </ul>"},{"location":"CHANGELOG/#0111","title":"0.11.1","text":"<ul> <li>Add support for PHP 8.4</li> <li>Manually check built-in classes to ignore them</li> </ul>"},{"location":"CHANGELOG/#0110","title":"0.11.0","text":"<ul> <li>Add support for PHPStan 2.x</li> <li>Drop support for PHPStan 1.x (breaks BC)</li> <li>Use namespaced names on shouldBeNamed assertion (breaks BC)</li> <li>Catch all attributes in dependency assertions</li> <li>Sanitize rule names to match PHPStan identifier pattern (breaks BC)</li> <li>Remove deprecated selectors (breaks BC)</li> <li>Add PHPStan identifiers from rule names</li> </ul>"},{"location":"CHANGELOG/#01020","title":"0.10.20","text":"<ul> <li>Fix parent interfaces not recognized as extended.</li> </ul>"},{"location":"CHANGELOG/#01019","title":"0.10.19","text":"<ul> <li>Add <code>IsTrait</code>  and <code>IsNotTrait</code> selectors.</li> <li>Add <code>IsException</code>, <code>IsError</code>, and <code>IsThrowable</code> selectors.</li> </ul>"},{"location":"CHANGELOG/#01018","title":"0.10.18","text":"<ul> <li>Add <code>shouldNotExist()</code> assertion.</li> </ul>"},{"location":"CHANGELOG/#01017","title":"0.10.17","text":"<ul> <li>Add the ability to define multiple Rules in the same test function.</li> </ul>"},{"location":"CHANGELOG/#01016","title":"0.10.16","text":"<ul> <li>Fix template names getting resolved as FQCNs in throws docs.</li> </ul>"},{"location":"CHANGELOG/#01015","title":"0.10.15","text":"<ul> <li>Add <code>shouldNotBeReadonly</code> assertion.</li> <li>Fix return types when building declaration rules with tips.</li> </ul>"},{"location":"CHANGELOG/#01014","title":"0.10.14","text":"<ul> <li>Add <code>shouldInclude()</code> and <code>shouldNotInclude</code> assertions.</li> <li>Detect catch blocks in dependency assertions.</li> <li>Fix shouldBeNamed assertion not functioning on second run.</li> </ul>"},{"location":"CHANGELOG/#01013","title":"0.10.13","text":"<ul> <li>Fix namespace selector matching similar namespaces.</li> </ul>"},{"location":"CHANGELOG/#01012","title":"0.10.12","text":"<ul> <li>Add <code>shouldBeNamed()</code> assertion.</li> <li>Add <code>shouldBeInterface()</code> assertion.</li> </ul>"},{"location":"CHANGELOG/#01011","title":"0.10.11","text":"<ul> <li>Add <code>#[TestRule]</code> attribute to mark test's methods as rules.</li> <li>Add <code>shouldApplyAttribute()</code> assertion.</li> <li>Deprecate <code>hasAttribute()</code> selector in favor of <code>appliesAttribute()</code>.</li> <li>Allow extending test files.</li> </ul>"},{"location":"CHANGELOG/#01010","title":"0.10.10","text":"<ul> <li>Add <code>shouldOnlyHaveOnePublicMethod()</code> assertion.</li> <li>Fix return type of target excludes builder step.</li> </ul>"},{"location":"CHANGELOG/#0109","title":"0.10.9","text":"<ul> <li>Add <code>hasAttribute()</code> selector.</li> <li>Deprecate <code>namespace()</code> selector in favor of <code>inNamespace()</code>.</li> <li>Deprecate <code>interface()</code> selector in favor of <code>isInterface()</code>.</li> <li>Deprecate <code>abstract()</code> selector in favor of <code>isAbstract()</code>.</li> <li>Deprecate <code>final()</code> selector in favor of <code>isFinal()</code>.</li> <li>Deprecate <code>readonly()</code> selector in favor of <code>isReadonly()</code>.</li> <li>Deprecate <code>enum()</code> selector in favor of <code>isEnum()</code>.</li> <li>Deprecate <code>attribute()</code> selector in favor of <code>isAttribute()</code>.</li> </ul>"},{"location":"CHANGELOG/#0108","title":"0.10.8","text":"<ul> <li>Fix <code>Should-</code> rules ignoring classes with empty findings.</li> </ul>"},{"location":"CHANGELOG/#0107","title":"0.10.7","text":"<ul> <li>Add tips to rule building using <code>because()</code>.</li> <li>Add <code>readonly()</code> selector and <code>shouldBeReadonly()</code> assertion. </li> </ul>"},{"location":"CHANGELOG/#0106","title":"0.10.6","text":"<ul> <li>Added parent and direct interfaces as dependencies.</li> <li>Fixed Stringable not treated as built-in class.</li> </ul>"},{"location":"CHANGELOG/#0105","title":"0.10.5","text":"<ul> <li>Added <code>Selector::AND()</code> modifier.</li> </ul>"},{"location":"CHANGELOG/#0104","title":"0.10.4","text":"<ul> <li>Added <code>ignore_built_in_classes</code> option to ignore built-in classes on relation assertions.</li> <li>Added <code>show_rule_names</code> option to output the rule name before the error message.</li> <li>Added class Attributes as dependencies.</li> <li>Fixed template names getting resolved as FQCNs.</li> </ul>"},{"location":"CHANGELOG/#0103","title":"0.10.3","text":"<ul> <li>Added <code>canOnlyDepend()</code> assertion.</li> </ul>"},{"location":"CHANGELOG/#0102","title":"0.10.2","text":"<ul> <li>Added <code>shouldBeAbstract()</code> and <code>shouldNotBeAbstract()</code> assertions.</li> <li>Fixed <code>shouldNotDependOn()</code> assertion ignoring static method calls.</li> </ul>"},{"location":"CHANGELOG/#0101","title":"0.10.1","text":"<ul> <li>Added <code>shouldBeFinal()</code> and <code>shouldNotBeFinal()</code> assertions.</li> </ul>"},{"location":"CHANGELOG/#0100","title":"0.10.0 \u26a0","text":"<ul> <li>Reconversion of the project as a PHPStan extension</li> </ul> <p>Read the upgrade guide for more information.</p>"},{"location":"CHANGELOG/#091","title":"0.9.1","text":"<ul> <li>Read configured <code>tests.path</code> recursively</li> </ul>"},{"location":"CHANGELOG/#090","title":"0.9.0","text":"<ul> <li>Fix phar file generation</li> <li>Make paths relative to configuration file</li> </ul>"},{"location":"CHANGELOG/#084","title":"0.8.4","text":"<ul> <li>Update event-dispatcher to allow psr/container v2</li> </ul>"},{"location":"CHANGELOG/#083","title":"0.8.3","text":"<ul> <li>Fix class property types not caught as dependencies</li> <li>Support PHP 8.1 features:</li> <li>Enums</li> <li>never type</li> <li>Intersection types</li> </ul>"},{"location":"CHANGELOG/#082","title":"0.8.2","text":"<ul> <li>Add Symfony 6 compatibility</li> </ul>"},{"location":"CHANGELOG/#081","title":"0.8.1","text":"<ul> <li>Fix exception when no files found in path selector</li> <li>Improve RegexClassName match performance</li> </ul>"},{"location":"CHANGELOG/#080","title":"0.8.0","text":"<ul> <li>Add PHP 8.0 and 8.1 compatibility</li> <li>Drop PHP 7.2 and 7.3 compatibility</li> <li>Support PHP 8.0 features:</li> <li>Constructor promotion</li> <li>Named Parameters</li> <li>Union Types</li> <li>Attributes</li> <li>Match and Throw Expression</li> <li>Rename <code>ignore_docblocks</code> to <code>ignore-docblocks</code></li> <li>Rename <code>ignore_php_extensions</code> to <code>ignore-php-extensions</code></li> <li>Remove <code>dry-run</code> option</li> <li>Add <code>php-version</code> option to force emulative lexer php version</li> <li>Move main executable file to <code>/bin/phpat</code></li> <li>Update min/max composer dependencies versions</li> <li>Remove BetterReflection usage</li> <li>Add default composer configuration</li> <li>Accept snake_case test filenames</li> <li>Baseline file</li> <li>Fix wrongly mapped fully qualified classnames on docblocks</li> <li>Ignore dependencies out of the class context</li> <li>Remove regex selections with results from origins to avoid duplicated statements</li> </ul>"},{"location":"CHANGELOG/#077","title":"0.7.7","text":"<ul> <li>Do not analyze excluded files (+info)</li> </ul>"},{"location":"CHANGELOG/#076","title":"0.7.6","text":"<ul> <li>Move CI to GitHub Actions</li> <li>Optimize FullClassName usage</li> </ul>"},{"location":"CHANGELOG/#075","title":"0.7.5","text":"<ul> <li>Fix random silent failures while creating internal php classmap</li> <li>Fix test file valid names</li> <li>Set default verbosity on invalid configuration</li> </ul>"},{"location":"CHANGELOG/#074","title":"0.7.4","text":"<ul> <li>Fix exclusions when they are not part of the src</li> <li>Allow to include test files with more valid names</li> </ul>"},{"location":"CHANGELOG/#073","title":"0.7.3","text":"<ul> <li>Change composer package name to <code>phpat/phpat</code></li> <li>Refactor AST build to a better-reflection/php-parse hybrid</li> <li>Add support to generic types in docs</li> <li>Add support to callable types in docs</li> <li>Add support to union types in docs</li> <li>Fix src path configuration sometimes giving issues</li> <li>Drop Symfony 2 compatibility</li> <li>Move Fatal Error exceptions out of event listener</li> <li>Fix issue with FQCNs starting with backslash</li> <li>Add psalm and phpstan to CI checks</li> </ul>"},{"location":"CHANGELOG/#072","title":"0.7.2","text":"<ul> <li>Move composer parsing to ReferenceMap creation stage</li> <li>Include unknown FQCNs (out of src) in ClassNameSelector</li> </ul>"},{"location":"CHANGELOG/#071","title":"0.7.1","text":"<ul> <li>Fix composer dependencies with empty namespace selected as <code>*</code></li> </ul>"},{"location":"CHANGELOG/#070","title":"0.7.0","text":"<ul> <li>Package name changed to <code>phpat/phpat</code></li> <li>Add support for tests in YAML and XML files</li> <li>Ignore only core and extension classes (instead of all classes without namespace)</li> <li>Add <code>ignore_php_extensions</code> option</li> <li>Change <code>ignore_docblocks</code> option name</li> <li>Change the configuration needed for composer selectors: <pre><code># phpat.yaml\ncomposer:\n  your-package-name:\n    json: path-to-composer.json\n    lock: path-to-composer.lock\n</code></pre></li> <li>Modify <code>ComposerSourceSelector</code> and <code>ComposerDependencySelector</code> so:</li> <li><code>areAutoloadableFromComposer</code> selects non-dev composer autoload classes</li> <li><code>areDevAutoloadableFromComposer</code> selects dev composer autoload classes</li> <li><code>areDependenciesFromComposer</code> selects non-dev composer dependencies</li> <li><code>areDevDependenciesFromComposer</code> selects dev composer dependencies</li> </ul>"},{"location":"CHANGELOG/#061","title":"0.6.1","text":"<ul> <li>Fix exclusions ignored in non-ast classes</li> <li>Add <code>ComposerSourceSelector</code> and <code>ComposerDependencySelector</code> <pre><code>$this-&gt;newRule\n    -&gt;classesThat(Selector::areAutoloadableFromComposer('file-composer-json', false))\n    -&gt;mustNotDependOn()\n    -&gt;classesThat(Selector::areDependenciesFromComposer('file-composer-json', 'file-composer-lock', true))\n</code></pre></li> </ul>"},{"location":"CHANGELOG/#060","title":"0.6.0","text":"<ul> <li>Add selection out of the src scope using full or partial class names <pre><code>$this-&gt;newRule\n    -&gt;classesThat(Selector::haveClassName('App\\*'))\n    -&gt;mustNotDependOn()\n    -&gt;classesThat(Selector::haveClassName('Symfony\\*'))\n</code></pre></li> <li>Add warnings when using regex class names with affirmative <code>must</code> assertions</li> <li>Fix some docblock types not resolved</li> <li>Fix error while using anonymous classes</li> </ul>"},{"location":"CHANGELOG/#058","title":"0.5.8","text":"<ul> <li>Add warnings when selectors do not find any class</li> <li>Fix group use declarations</li> <li>Fix some functions and primitive types resolved as classes</li> <li>Ignore dependencies without namespace (predefined PHP classes)</li> </ul>"},{"location":"CHANGELOG/#057","title":"0.5.7","text":"<ul> <li>Added support for <code>*</code> on include and exclude options</li> <li>Fixed ignored include option when using other than PathSelector</li> <li>Modified command now looks for default <code>phpat.yaml</code> or <code>phpat.yml</code> files</li> <li>Modified success report character from <code>\u00b7</code> to <code>.</code></li> </ul>"},{"location":"CHANGELOG/#056","title":"0.5.6","text":"<ul> <li>Fixed false exception message shown on violated rules report</li> </ul>"},{"location":"CHANGELOG/#054","title":"0.5.4","text":"<ul> <li>Added dry-run to internal errors</li> <li>Modified fatal error handler</li> <li>Modified executable to match php version requirement</li> <li>Fixed include option</li> </ul>"},{"location":"CHANGELOG/#053","title":"0.5.3","text":"<ul> <li>Added <code>CanOnlyImplement</code> and <code>MustOnlyImplement</code> rule types</li> <li>Added <code>CanOnlyInclude</code> and <code>MustOnlyInclude</code> rule type</li> <li>Added <code>CanOnlyDepend</code> and <code>MustOnlyDepend</code> rule types</li> <li>Added <code>CanOnlyExtend</code> rule type</li> <li>Modified statements now check all the defined relations of a class</li> <li>Fixed native PHP classes not correctly found</li> </ul>"},{"location":"CHANGELOG/#052","title":"0.5.2","text":"<ul> <li>Added <code>Selector::implementInterface</code> to select classes that implement a certain interface</li> <li>Added <code>Selector::extendClass</code> to select classes that extend a certain class</li> <li>Added <code>Selector::includeTrait</code> to select classes that include a certain trait</li> <li>Added some PHP configurations (error_reporting, display_errors, gc_disable)</li> <li>Added verbosity as a cli command option</li> <li>Fixed options being ignored in configuration files</li> </ul>"},{"location":"CHANGELOG/#051","title":"0.5.1","text":"<ul> <li>Added <code>Selector::haveClassName</code> to select classes by fully qualified names</li> <li>Performance boost by building an AST map instead of parsing each time</li> </ul>"},{"location":"CHANGELOG/#050","title":"0.5.0","text":"<ul> <li>Added a changelog :smile:</li> <li>Changed Minimum PHP version from <code>7.1</code> to <code>7.2</code>.</li> <li>Changed dependency <code>symfony/event-dispatcher</code> to <code>carlosas/simple-event-dispatcher</code>.</li> </ul>"},{"location":"UPGRADE-0.10/","title":"UPGRADE to 0.10.0","text":""},{"location":"UPGRADE-0.10/#the-tool-has-been-converted-to-a-phpstan-extension-now-it-requires-the-user-to-run-it-with-the-phpat-extension-activated","title":"The tool has been converted to a PHPStan extension. Now it requires the user to run it with the PHPat extension activated.","text":"<p>\u2139\ufe0f Some features have been removed, but will come back in future versions.</p>"},{"location":"UPGRADE-0.10/#configuration","title":"Configuration","text":"<ul> <li>Remove your <code>phpat.yaml</code>, use <code>phpat.neon</code> instead.</li> <li>Instead of a test suite path, use fully qualified names of your test classes. </li> <li>Enable the extension in your PHPStan configuration.</li> <li>The configuration <code>ignore-docblocks</code> is now called <code>ignore_doc_comments</code>.</li> <li>The rest of configurations do not exist anymore.</li> </ul> <p><pre><code># phpstan.neon\nincludes:\n    - vendor/phpat/phpat/extension.neon\n    - phpat.neon\n</code></pre> <pre><code># phpat.neon\nservices:\n    -\n        class: Tests\\Architecture\\MyFirstTest\n        tags:\n            - phpat.test\n    -\n        class: Tests\\Architecture\\MySecondTest\n        tags:\n            - phpat.test\n</code></pre> \u26a0\ufe0f Your architecture tests folder should be included in the PHPStan analysed paths.</p>"},{"location":"UPGRADE-0.10/#tests","title":"Tests","text":"<ul> <li>Test classes do not extend <code>ArchitectureTest</code> anymore.</li> <li>Instead of <code>$this-&gt;rule</code>, the rule builder gets started with <code>PHPat::rule()</code>.</li> <li>Instead of using <code>andClassesThat()</code>, all selectors are now passed as consecutive arguments of a single <code>classes()</code> method.</li> <li>The build process does not need to end with a <code>build()</code> anymore. <pre><code>PHPat::rule()\n    -&gt;classes(Selector::namespace('App\\Domain'))\n    -&gt;excluding(Selector::classname(KnownBadApproach::class))\n    -&gt;shouldNotDependOn()\n    -&gt;classes(\n        Selector::namespace('App\\Application'),\n        Selector::namespace('App\\Infrastructure')\n    );\n</code></pre></li> </ul> <p>You can use regular expressions in selectors, but be aware that you might need to escape the backlashes properly. Example: <pre><code>Selector::namespace('/^App\\\\\\\\.*\\\\\\\\Infrastructure\\\\\\\\.*/', true)\n</code></pre></p>"},{"location":"UPGRADE-0.10/#selectors","title":"Selectors","text":"<ul> <li>Arguments do not accept the <code>*</code> wildcard anymore. Instead, you can now use a regular expression setting the second parameter to true.</li> <li>Composer selectors are not available anymore, at least not for now.</li> <li>Selector methods have changed slightly and some new have been added. Check the Selectors docs for more information.</li> </ul>"},{"location":"UPGRADE-0.10/#assertions","title":"Assertions","text":"<ul> <li>The verb <code>must</code> has been replaced by <code>should</code>.</li> <li>Assertions have changed slightly as well, this is the list of current assertions:</li> <li>should extend</li> <li>should implement</li> <li>should not extend</li> <li>should not implement</li> <li>should not depend on</li> <li>should not construct</li> <li>See the Assertions docs for more information.</li> </ul>"},{"location":"about/","title":"About","text":""},{"location":"about/#sponsors","title":"Sponsors","text":""},{"location":"contributing/","title":"Contributing","text":"<p>There are several ways to help out:</p> <ul> <li>Create an issue on GitHub if you have found a bug or have an idea for a feature</li> <li>Write test cases for open bug issues</li> <li>Write patches for open bug/feature issues</li> </ul>"},{"location":"contributing/#pull-requests","title":"Pull Requests","text":"<ul> <li>Meaningful modifications, for typos or superfluous changes open an issue</li> <li>All features should be covered by tests if possible</li> <li>All tests and coding standard checks should pass</li> </ul> <pre><code>composer validate --strict\nvendor/bin/php-cs-fixer fix --config ./ci/php-cs-fixer.php\nvendor/bin/phpstan analyse -c ci/phpstan-phpat.neon\nvendor/bin/psalm -c ci/psalm.xml\nvendor/bin/phpunit tests/unit/\n</code></pre>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>The documentation is written in Markdown and is located in the <code>docs</code> folder.</p> <p>The docs page is built with MkDocs. To build the documentation locally, run: <pre><code>docker run -p 8000:8000 --rm -v$(pwd):/docs squidfunk/mkdocs-material:9\n</code></pre> When the container is running, you can access the documentation at <code>http://localhost:8000</code>. When the pull request is merged, the documentation will be automatically deployed to https://phpat.dev.</p>"},{"location":"contributing/#slack-channel","title":"Slack channel","text":"<p>Feel free to join the channel #static-analysis on SymfonyDevs' workspace if you want to discuss something or need some help.</p>"},{"location":"contributing/#code-of-conduct","title":"Code of conduct","text":"<p>This project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms.</p>"},{"location":"examples/","title":"Examples","text":"<p>The following sections illustrate some typical checks you could perform.</p>"},{"location":"examples/#class-dependencies","title":"Class dependencies","text":""},{"location":"examples/#layered-architecture","title":"Layered Architecture","text":"<p>If you are organizing your code in layers (e.g. with an onion structure), you might want to ensure that the inner layers do not depend on the outer ones:</p> <p>Classes in namespace App\\Domain should not depend on classes in namespace App\\Application and classes in namespace App\\Infrastructure</p> <p>Classes in namespace App\\Application should not depend on classes in namespace App\\Infrastructure</p>"},{"location":"examples/#model-view-controller","title":"Model-View-Controller","text":"<p>If you are using a MVC approach, you could ensure that both model and view are not coupled to controllers. You also might want to check that they are not coupled to each other:</p> <p>Classes in namespace App\\Model and classes in namespace App\\View should not depend on classes in namespace App\\Controller</p> <p>Classes in namespace App\\Model should not depend on classes in namespace App\\View</p> <p>Classes in namespace App\\View should not depend on classes in namespace App\\Model</p>"},{"location":"examples/#vendors-coupling","title":"Vendors coupling","text":"<p>Classes in namespace App\\Domain can only depend on classes in namespace App\\Domain</p>"},{"location":"examples/#aggregates","title":"Aggregates","text":"<p>You won't want your classes to have direct access to the members of an aggregate, except for the aggregate root. You can use a lot of different approaches to identify the root and its members: by namespace, filepath, an abstract or interface for the aggregate root, etc. If you have, for instance, an AggregateRootInterface you can create a rule like this</p> <p>Classes in namespace App excluding classes that implement App\\Domain\\Entity\\AggregateRootInterface should not depend on classes in namespace App\\Domain\\Entity excluding classes that implement App\\Domain\\Entity\\AggregateRootInterface</p> <p></p>"},{"location":"examples/#inheritance","title":"Inheritance","text":""},{"location":"examples/#enforcing-or-forbidding-an-abstract-extension","title":"Enforcing or forbidding an abstract extension","text":"<p>You might want to ensure that a specific type of classes are extending a certain abstract class. Services, Controllers, CommandHandlers, etc.</p> <p>Classes with name <code>/^App\\\\Application\\\\.+Handler$/</code> should extend class with name App\\Application\\AbstractHandler</p> <p></p>"},{"location":"examples/#composition","title":"Composition","text":""},{"location":"examples/#enforcing-or-forbidding-an-interface-implementation","title":"Enforcing or forbidding an interface implementation","text":"<p>You might want to ensure that a specific type of classes are implementing a certain interface. ValueObjects, Entities, etc.</p> <p>Classes in namespace App\\Domain\\Entity should implement class with name App\\Domain\\Entity\\EntityInterface</p>"},{"location":"getting-started/","title":"Getting started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<p>Require PHPat with Composer: <pre><code>composer require --dev phpat/phpat\n</code></pre></p> <p>Activate the extension using one of the following methods:</p> Automatic activation <pre><code>composer require --dev phpstan/extension-installer\n</code></pre> Manual activation <pre><code># phpstan.neon\nincludes:\n    - vendor/phpat/phpat/extension.neon\n</code></pre>"},{"location":"getting-started/#configuration","title":"Configuration","text":"<p>You will need to register your test classes in your PHPStan configuration: <pre><code># phpstan.neon\nservices:\n    -\n        class: Tests\\Architecture\\MyFirstTest\n        tags:\n            - phpat.test\n</code></pre> \u26a0\ufe0f Your architecture tests folder should be included in the PHPStan analysed paths.</p> <p>You can configure some PHPat options as follows: <pre><code># phpstan.neon\nparameters:\n    phpat:\n        ignore_built_in_classes: true\n</code></pre></p> <p>See the complete list of options in the Configuration section. </p>"},{"location":"getting-started/#test-definition","title":"Test definition","text":"<p>There are different Selectors available to select the classes involved in a rule, and a wide set of Assertions.</p> <p>Here's an example test with a rule:</p> <pre><code>&lt;?php\n\nuse PHPat\\Selector\\Selector;\nuse PHPat\\Test\\Builder\\Rule;\nuse PHPat\\Test\\PHPat;\nuse App\\Domain\\SuperForbiddenClass;\n\nfinal class MyFirstTest\n{\n    public function test_domain_does_not_depend_on_other_layers(): Rule\n    {\n        return PHPat::rule()\n            -&gt;classes(Selector::inNamespace('App\\Domain'))\n            -&gt;shouldNotDependOn()\n            -&gt;classes(\n                Selector::inNamespace('App\\Application'),\n                Selector::inNamespace('App\\Infrastructure'),\n                Selector::classname(SuperForbiddenClass::class),\n                Selector::classname('/^SomeVendor\\\\\\.*\\\\\\ForbiddenSubfolder\\\\\\.*/', true)\n            )\n            -&gt;because('this will break our architecture, implement it another way! see /docs/howto.md');\n    }\n}\n</code></pre>"},{"location":"getting-started/#usage","title":"Usage","text":"<p>Run PHPStan as usual: <pre><code>php vendor/bin/phpstan analyse -c phpstan.neon\n</code></pre></p>"},{"location":"documentation/assertions/","title":"Assertions","text":"<p>Assertion is the type of verification that can be done in the selected classes.</p>"},{"location":"documentation/assertions/#shouldbenamed","title":"shouldBeNamed()","text":"<p>It asserts that the selected classes are named as the namespaced name specified.</p>"},{"location":"documentation/assertions/#shouldbefinal","title":"shouldBeFinal()","text":"<p>It asserts that the selected classes are declared as final.</p> <p>Also available: <code>shouldNotBeFinal()</code></p>"},{"location":"documentation/assertions/#shouldbeenum","title":"shouldBeEnum()","text":"<p>It asserts that the selected classes are enums.</p> <p>Also available: <code>shouldNotBeEnum()</code></p>"},{"location":"documentation/assertions/#shouldbeabstract","title":"shouldBeAbstract()","text":"<p>It asserts that the selected classes are declared as abstract.</p> <p>Also available: <code>shouldNotBeAbstract()</code></p>"},{"location":"documentation/assertions/#shouldbeinterface","title":"shouldBeInterface()","text":"<p>It asserts that the selected classes are interfaces.</p>"},{"location":"documentation/assertions/#shouldbereadonly","title":"shouldBeReadonly()","text":"<p>It asserts that the selected classes are declared as readonly.</p> <p>Also available: <code>shouldNotBeReadonly()</code></p>"},{"location":"documentation/assertions/#shouldbeinvokable","title":"shouldBeInvokable()","text":"<p>It asserts that the selected classes are invokable by implementing <code>__invoke</code> method.</p> <p>Also available: <code>shouldNotBeInvokable()</code></p>"},{"location":"documentation/assertions/#shouldhaveonlyonepublicmethod","title":"shouldHaveOnlyOnePublicMethod()","text":"<p>It asserts that the selected classes only have one public method (besides constructor).</p>"},{"location":"documentation/assertions/#shouldhaveonlyonepublicmethodnamed","title":"shouldHaveOnlyOnePublicMethodNamed","text":"<p>It asserts that the selected classes only have one public method with specified name (besides constructor).</p>"},{"location":"documentation/assertions/#shouldextend","title":"shouldExtend()","text":"<p>It asserts that the selected classes extend the target class.</p> <p>Also available: <code>shouldNotExtend()</code></p>"},{"location":"documentation/assertions/#shouldimplement","title":"shouldImplement()","text":"<p>It asserts that the selected classes implement the target interfaces.</p> <p>Also available: <code>shouldNotImplement()</code></p>"},{"location":"documentation/assertions/#shouldinclude","title":"shouldInclude()","text":"<p>It asserts that the selected classes include the target traits.</p> <p>Also available: <code>shouldNotInclude()</code></p>"},{"location":"documentation/assertions/#shouldnotdependon","title":"shouldNotDependOn()","text":"<p>It asserts that the selected classes do not depend on the target classes.</p>"},{"location":"documentation/assertions/#shouldnotconstruct","title":"shouldNotConstruct()","text":"<p>It asserts that the selected classes do not use the constructor of the target classes.</p>"},{"location":"documentation/assertions/#shouldnotexist","title":"shouldNotExist()","text":"<p>It asserts that the selected classes do not exist.</p>"},{"location":"documentation/assertions/#shouldapplyattribute","title":"shouldApplyAttribute()","text":"<p>It asserts that the selected classes apply the target attributes.</p>"},{"location":"documentation/assertions/#canonlydependon","title":"canOnlyDependOn()","text":"<p>It asserts that the selected classes do not depend on anything else than the target classes.</p> <p>This would be equivalent to <code>shouldNotDependOn()</code> with the negation of the target classes.</p>"},{"location":"documentation/configuration/","title":"Configuration","text":"<p>You can configure PHPat options in your <code>phpstan.neon</code> as follows: <pre><code># phpstan.neon\nparameters:\n    phpat:\n        ignore_built_in_classes: false\n        show_rule_names: true\n</code></pre></p> <p> This is the complete list of available options:</p> Name Description Default <code>ignore_doc_comments</code> Ignore relations on Doc Comments false <code>ignore_built_in_classes</code> Ignore relations with PHP+ext classes false <code>show_rule_names</code> Show rule name to assertion message false"},{"location":"documentation/other/","title":"Other features","text":"<p>PHP Architecture Tester is a PHPStan extension, so it has all its power.</p> <p>These are some key features that you might want to know about:</p>"},{"location":"documentation/other/#baseline-file","title":"Baseline file","text":"<p>PHPStan can generate a baseline file with the current errors. This file can be used to ignore current errors and only report new errors.</p> <p>https://phpstan.org/user-guide/baseline</p>"},{"location":"documentation/other/#output-formats","title":"Output formats","text":"<p>PHPStan supports different output formats through various so-called error formatters.</p> <p>https://phpstan.org/user-guide/output-format</p>"},{"location":"documentation/other/#ignore-errors","title":"Ignore errors","text":"<p>PHPStan allows you to ignore certain errors in different ways.</p> <p>https://phpstan.org/user-guide/ignoring-errors</p>"},{"location":"documentation/other/#parallel-analysis","title":"Parallel analysis","text":"<p>PHPStan can analyze multiple files in parallel to speed up the analysis.</p> <p>https://phpstan.org/blog/from-minutes-to-seconds-massive-performance-gains-in-phpstan</p>"},{"location":"documentation/other/#result-cache","title":"Result Cache","text":"<p>PHPStan can cache the results of the analysis to speed up the analysis of the next run.</p> <p>https://phpstan.org/user-guide/result-cache</p> <p></p>"},{"location":"documentation/rules/","title":"Rules","text":"<p>A rule is a statement, consisting in Selectors and Assertions, that must be true for the test to pass.</p> <p>Each test class can contain one or more rules.</p> <p></p> <p>Your rules must be public methods that start with <code>test_</code> or apply the <code>#[TestRule]</code> attribute. You can build rules using the <code>\\PHPat\\Test\\PHPat::rule()</code> method:</p> <pre><code>namespace App\\Tests\\Architecture;\n\nuse PHPat\\Selector\\Selector;\nuse PHPat\\Test\\Attributes\\TestRule;\nuse PHPat\\Test\\Builder\\Rule;\nuse PHPat\\Test\\PHPat;\n\nfinal class ConfigurationTest\n{\n    public function test_domain_independence(): Rule\n    {\n        return PHPat::rule()\n            -&gt;classes(Selector::inNamespace('App\\Domain'))\n            -&gt;canOnlyDependOn()\n            -&gt;classes(Selector::inNamespace('App\\Domain'));\n        ;\n    }\n\n    #[TestRule]\n    public function entities_are_final(): Rule\n    {\n        return PHPat::rule()\n            -&gt;classes(Selector::extends(Entity::class))\n            -&gt;shouldBeFinal()\n        ;\n    }\n}\n</code></pre>"},{"location":"documentation/rules/#rule-identifiers","title":"Rule identifiers","text":"<p>When a rule is violated, the error message will contain an identifier that you can use to ignore the error.</p> <p>Currently, the error identifier is based on the rule method name.</p>"},{"location":"documentation/rules/#dynamic-rule-sets","title":"Dynamic Rule Sets","text":"<p>It is possible to dynamically create rules by returning an iterable of Rules from your method:</p> <pre><code>namespace App\\Tests\\Architecture;\n\nuse PHPat\\Selector\\Selector;\nuse PHPat\\Test\\Builder\\Rule;\nuse PHPat\\Test\\PHPat;\n\nfinal class ConfigurationTest\n{\n    private const DOMAINS = [\n        'App\\Domain1',\n        'App\\Domain2',\n    ];\n\n    /**\n     * @return iterable&lt;Rule&gt;\n     */\n    public function test_domain_independence(): iterable\n    {\n        foreach(self::DOMAINS as $domain) {\n            yield PHPat::rule()\n                -&gt;classes(Selector::inNamespace($domain))\n                -&gt;canOnlyDependOn()\n                -&gt;classes(Selector::inNamespace($domain));\n        }\n    }\n}\n</code></pre>"},{"location":"documentation/rules/#extending-test-classes","title":"Extending test classes","text":"<p>You might want to reuse rules in different tests or parametrize them for a modular scenario.</p> <p>Reusing rules is possible by extending a class or using traits.</p> <p>Let's see an example:</p> <p>You are splitting bounded contexts, and you want the domain of each context to be independent of the others. Your rule should check that classes in the domain of a context do not depend on classes in the domain of another context.</p> <p>This is what you can do: <pre><code>namespace App\\Tests\\Architecture;\n\nabstract class AbstractDomainTest\n{\n    public final function test_bounded_context_domain_independence(): Rule\n    {\n        return PHPat::rule()\n            -&gt;classes(\n                Selector::inNamespace(sprintf('App\\Module\\%s\\Domain', $this-&gt;getModuleName()))\n            )\n            -&gt;canOnlyDependOn()\n            -&gt;classes(\n                Selector::inNamespace(sprintf('App\\Module\\%s\\Domain', $this-&gt;getModuleName())),\n                Selector::inNamespace('App\\Module\\Shared\\Domain'),\n            )\n            -&gt;because('Domain should not use code from other contexts');\n    }\n\n    abstract protected function getModuleName(): string\n}\n</code></pre></p> <pre><code>namespace App\\Tests\\Architecture\\User;\n\nfinal class UserDomainTest extends AbstractDomainTest\n{\n    protected function getModuleName(): string\n    {\n        return 'User';\n    }\n}\n</code></pre> <p>Note that you would only need to register the <code>UserDomainTest</code> class as a PHPat test in the PHPStan config file.</p>"},{"location":"documentation/selectors/","title":"Selectors","text":"<p>Selectors are the way to tell PHPat which classes are going to intervene in a rule.</p> <p>You can always use a regular expression, setting the <code>regex</code> parameter to true, to select everything that matches that expression.</p>"},{"location":"documentation/selectors/#selectorall","title":"Selector::all()","text":"<p>Selects all classes being parsed.</p>"},{"location":"documentation/selectors/#selectorclassname","title":"Selector::classname()","text":"<p>Selects classes with the given fully qualified name or regex.</p> <pre><code>Selector::classname('App\\User\\Domain\\UserEntity')\nSelector::classname(UserEntity::class)\nSelector::classname('/.+Handler/', true)\n</code></pre> <p>The first two selectors will select the <code>App\\User\\Domain\\UserEntity</code> class.</p> <p>The third one will select all classes whose name ends in <code>Handler</code>.</p>"},{"location":"documentation/selectors/#selectorinnamespace","title":"Selector::inNamespace()","text":"<p>Selects classes in the given namespace.</p> <pre><code>Selector::inNamespace('App\\User\\Domain')\nSelector::inNamespace('/^App\\\\\\\\.+\\\\\\\\Domain/', true)\n</code></pre> <p>The first selector will select all classes in the <code>App\\User\\Domain</code> namespace.</p> <p>The second one will select all classes in a namespace matching the regular expression.</p>"},{"location":"documentation/selectors/#selectorwithfilepath","title":"Selector::withFilepath()","text":"<p>Selects classes matching the given filepath.</p> <pre><code>Selector::withFilepath('src/App/User/Domain/UserEntity.php')\nSelector::withFilepath('/.+Domain.*\\.php/', true)\n</code></pre> <p>The first selector will select all classes defined in the <code>src/App/User/Domain/UserEntity.php</code> file.</p> <p>The second one will select all classes who have a filepath matching the regular expression.</p>"},{"location":"documentation/selectors/#selectorisstandardclass","title":"Selector::isStandardClass()","text":"<p>Selects Predefined PHP classes (stdClass, ArrayAccess, Exception, Enum...)</p>"},{"location":"documentation/selectors/#selectoriserror","title":"Selector::isError()","text":"<p>Selects classes that extend the <code>\\Error</code> class.</p>"},{"location":"documentation/selectors/#selectorisexception","title":"Selector::isException()","text":"<p>Selects classes that extend the <code>\\Exception</code> class.</p>"},{"location":"documentation/selectors/#selectoristhrowable","title":"Selector::isThrowable()","text":"<p>Selects classes that implement the <code>\\Throwable</code> interface.</p>"},{"location":"documentation/selectors/#selectorimplementsstring","title":"Selector::implements(string)","text":"<p>Selects classes that implement the given interface.</p>"},{"location":"documentation/selectors/#selectorextendsstring","title":"Selector::extends(string)","text":"<p>Selects classes that extend the given class.</p>"},{"location":"documentation/selectors/#selectorisinterface","title":"Selector::isInterface()","text":"<p>Selects all interfaces.</p>"},{"location":"documentation/selectors/#selectorappliesattributestring","title":"Selector::appliesAttribute(string)","text":"<p>Selects classes that applies the given attribute. You can pass one or more arguments with their values that the attribute should apply to.</p>"},{"location":"documentation/selectors/#selectorisabstract","title":"Selector::isAbstract()","text":"<p>Selects all abstract classes.</p>"},{"location":"documentation/selectors/#selectorisattribute","title":"Selector::isAttribute()","text":"<p>Selects all attribute classes.</p>"},{"location":"documentation/selectors/#selectorisenum","title":"Selector::isEnum()","text":"<p>Selects all enums.</p>"},{"location":"documentation/selectors/#selectorisfinal","title":"Selector::isFinal()","text":"<p>Selects all final classes.</p>"},{"location":"documentation/selectors/#selectorisreadonly","title":"Selector::isReadonly()","text":"<p>Selects all readonly classes.</p>"},{"location":"documentation/selectors/#selectoristrait","title":"Selector::isTrait()","text":"<p>Selects all traits.</p> <p></p>"},{"location":"documentation/selectors/#selectornotselector","title":"Selector::NOT(Selector)","text":"<p>Selects classes that do not match the inner Selector.</p> <pre><code>Selector::NOT(\n    Selector::inNamespace('App\\User')\n)\n</code></pre> <p>This will select all classes that are not in the <code>App\\User</code> namespace.</p>"},{"location":"documentation/selectors/#selectorallofselectors","title":"Selector::AllOf(...Selectors)","text":"<p>Selects classes that match all the inner Selectors. (and operator)</p> <pre><code>Selector::AllOf(\n    Selector::namespace('App\\User'),\n    Selector::isAbstract()\n)\n</code></pre> <p>This will select all abstract classes in the <code>App\\User</code> namespace.</p>"},{"location":"documentation/selectors/#selectoranyofselectors","title":"Selector::AnyOf(...Selectors)","text":"<p>Selects classes that match any of the inner Selectors. (or operator)</p> <pre><code>Selector::AnyOf(\n    Selector::namespace('App\\User'),\n    Selector::isAbstract()\n)\n</code></pre> <p>This will select all classes in the <code>App\\User</code> namespace and all abstract classes.</p>"},{"location":"documentation/selectors/#selectornoneofselectors","title":"Selector::NoneOf(...Selectors)","text":"<p>Selects classes that do not match any of the inner Selectors. (not of operator)</p> <pre><code>Selector::NoneOf(\n    Selector::namespace('App\\User'),\n    Selector::isAbstract()\n)\n</code></pre> <p>This will select all classes that are not in the <code>App\\User</code> namespace and are not abstract.</p>"},{"location":"documentation/selectors/#selectoroneofselectors","title":"Selector::OneOf(...Selectors)","text":"<p>Selects classes that match exactly one of the inner Selectors. (xor operator)</p> <pre><code>Selector::OneOf(\n    Selector::namespace('App\\User'),\n    Selector::isAbstract(),\n    Selector::isTrait()\n)\n</code></pre> <p>This will select all classes that are in the <code>App\\User</code> namespace or are abstract or are traits, but not more than one of them.</p>"},{"location":"documentation/selectors/#selectoratleastcountofint-selectors","title":"Selector::AtLeastCountOf(int, ...Selectors)","text":"<p>Selects classes that match at least X of the inner Selectors. (at least x of operator)</p> <pre><code>Selector::AtLeastCountOf(\n    2,\n    Selector::namespace('App\\User'),\n    Selector::isAbstract()\n)\n</code></pre> <p>This will select all classes that are in the <code>App\\User</code> namespace and are abstract.</p>"},{"location":"documentation/selectors/#selectoratmostcountofint-selectors","title":"Selector::AtMostCountOf(int, ...Selectors)","text":"<p>Selects classes that match at most X of the inner Selectors. (at most x of operator)</p> <pre><code>Selector::AtMostCountOf(\n    1,\n    Selector::namespace('App\\User'),\n    Selector::isAbstract()\n)\n</code></pre> <p>This will select all classes that are in the <code>App\\User</code> namespace or are abstract, but not both.</p>"}]}